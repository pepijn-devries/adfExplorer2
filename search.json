[{"path":[]},{"path":"https://pepijn-devries.github.io/adfExplorer2/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement https://www.github.com/pepijn-devries/adfExplorer2/DESCRIPTION. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/adfExplorer2/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://pepijn-devries.github.io/adfExplorer2/articles/adfExplorer_vs_adfExplorer2.html","id":"motivation-for-adfexplorer2","dir":"Articles","previous_headings":"","what":"Motivation for adfExplorer2","title":"adfExplorer vs. adfExplorer2","text":"adfExplorer2 succesor adfExplorer. vignette explains complete overhaul created released separately different version. also provide hands examples showing modify R code switching adfExplorer adfExplorer2. predecessor adfExplorer everything coded R. Although, technically lot achieved, effective. order work Amiga Disk Files, entire file first needed copied memory, save object memory back disk manipulation. Consider case want extract file virtual disk store local drive. schematics show process old situation. ADF file first needs copied memory. file data object needs extracted copy. file data can stored disk: working approach , learned existence ADFlib. decided start scratch set efficient design resulting adfExplorer2. took C code ADFlib build interface R C++. strategy several advantages: wheel doesn’t reinvented, ADFlib already implemented core functionalities interacting Amiga Disk Files. Custom R connections can created. allows modify ADF files place without copy memory first. program needs compiled new strategy doesn’t need move data back forth memory uses compiled code, much faster (see also benchmark test ). Furthermore, can create connections files virtual device directly read write files. need create physical copies virtual file. process extracting file ADF device adfExplorer2 look something like :","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/articles/adfExplorer_vs_adfExplorer2.html","id":"switching-to-adfexplorer2","dir":"Articles","previous_headings":"","what":"Switching to adfExplorer2","title":"adfExplorer vs. adfExplorer2","text":"code using adfExplorer, recommend switching adfExplorer2 earliest convenience. Partly reasons listed , also adfExplorer receive minimal maintenance. adfExplorer2 uses different syntax, put examples side side, help translate code. Let’s start opening Amiga Disk File: Show change current dir: List entries directory. Note adfExplorer2 capability list entries recursively (nested subdirectories): Read file virtual disk: Clean :","code":"adz_file <- system.file(\"example.adz\", package = \"adfExplorer2\")  # ---------------- adfExplorer library(adfExplorer)  my_disk1 <- read.adz(adz_file)  # ---------------- adfExplorer2  library(adfExplorer2)  my_disk2 <- connect_adf(adz_file) # ---------------- adfExplorer current.adf.dir(my_disk1) #> [1] \"adfExampleOFS:\" current.adf.dir(my_disk1) <- \"s\"  # ---------------- adfExplorer2 adf_directory(my_disk2) #> ROOT                   adfExampleOFS adf_directory(my_disk2) <- \"s\" # ---------------- adfExplorer list.adf.files(my_disk1, \"DF0:\") #> [1] \"Devs\" \"S\"    \"this\" \"mods\"  # ---------------- adfExplorer2 adf_dir_list(my_disk2, \"DF0:\", recursive = TRUE) #> DIR  ...DEWR---- Devs #> FILE ...configuration #> DIR  ...   DEWR---- S #> FILE ...rtup-Sequence #> DIR  ...DEWR---- this #> DIR  ...  DEWR---- is #> DIR  ...   DEWR---- a #> DIR  ...DEWR---- deep #> DIR  ...DEWR---- path #> DIR  ...DEWR---- mods #> FILE ...--- mod.intro # ---------------- adfExplorer get.adf.file(my_disk1, \"startup-sequence\") |>   rawToChar() #> [1] \"; The Startup-Sequence is executed after booting\\n; Everything after semicolons are comments and is ignored\\n; By default standard commands are loaded from\\n; the ROM kickstart. Additional commands should be\\n; stored on the disk in the SYS:C directory.\\n; For demonstration purposes we only echo some\\n; text to the screen... Note that this will not\\n; work on Amiga OS <2.0 as \\\"Echo\\\" is not available\\n; in older ROM kickstart versions.\\n\\nEcho \\\"\\033c\\033[22m\\033[32mADF Explorer Example Disk\\\" ; Note that the weird characters at the start are escape-codes to format the text\\nEcho \\\"\\033[0mThis disk was created as an example for the\\\"\\nEcho \\\"R package 'adfExplorer' by Pepijn de Vries.\\\"\"  # ---------------- adfExplorer2 con <- adf_file_con(my_disk2, \"startup-sequence\") readLines(con, warn = FALSE) #>  [1] \"; The Startup-Sequence is executed after booting\"                                                                                          #>  [2] \"; Everything after semicolons are comments and is ignored\"                                                                                 #>  [3] \"; By default standard commands are loaded from\"                                                                                            #>  [4] \"; the ROM kickstart. Additional commands should be\"                                                                                        #>  [5] \"; stored on the disk in the SYS:C directory.\"                                                                                              #>  [6] \"; For demonstration purposes we only echo some\"                                                                                            #>  [7] \"; text to the screen... Note that this will not\"                                                                                           #>  [8] \"; work on Amiga OS <2.0 as \\\"Echo\\\" is not available\"                                                                                      #>  [9] \"; in older ROM kickstart versions.\"                                                                                                        #> [10] \"\"                                                                                                                                          #> [11] \"Echo \\\"\\033c\\033[22m\\033[32mADF Explorer Example Disk\\\" ; Note that the weird characters at the start are escape-codes to format the text\" #> [12] \"Echo \\\"\\033[0mThis disk was created as an example for the\\\"\"                                                                               #> [13] \"Echo \\\"R package 'adfExplorer' by Pepijn de Vries.\\\"\" close(con) # ---------------- adfExplorer rm(my_disk1)  # ---------------- adfExplorer2 close(my_disk2) rm(my_disk2)"},{"path":"https://pepijn-devries.github.io/adfExplorer2/articles/adfExplorer_vs_adfExplorer2.html","id":"benchmarking-adfexplorer-and-adfexplorer2","dir":"Articles","previous_headings":"","what":"Benchmarking adfExplorer and adfExplorer2","title":"adfExplorer vs. adfExplorer2","text":"set tasks defined evaluate computational time: open ADF file; show current dir; set current directory specific path; read small text file virtual device; list dir file entries disk’s root. plot shows time took complete tasks packages. adfExplorer2 nearly 5 times faster predecessor.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/articles/file_system_modes.html","id":"fast-file-system-vs--old-file-system","dir":"Articles","previous_headings":"","what":"Fast File System vs. Old File System","title":"ADF File System Modes","text":"Amiga OS version 2.0, -called Fast File System (FFS) introduced. previous file system named time, now commonly referred Old File System (OFS). OFS sacrifices disk space validation purposes, making robust case data recovery disk got damaged. advantage dropped FFS making slightly faster (original machines) gaining disk space file data. FFS backward compatability. disks formatted file systems read Amiga OS versions <2.0.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/articles/file_system_modes.html","id":"international-mode","dir":"Articles","previous_headings":"","what":"International mode","title":"ADF File System Modes","text":"OS version 2.0 ‘international mode’ also introduced. mode meant correct mistake routine convert text upper case. Amiga file names can lower upper case characters. file name matching, case ignored. purpose, file names shifted upper case file name matching routines. Amiga uses ISO 8859 Latin-1 character set, older operating systems (<2.0), international characters (e.g., ‘ø’) capitalised. mistake corrected OS 2.0, optional. combination ‘directory cache mode’ (see ), international mode mandatory.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/articles/file_system_modes.html","id":"directory-caching","dir":"Articles","previous_headings":"","what":"Directory Caching","title":"ADF File System Modes","text":"Amiga OS 3.0, ‘directory cache mode’ introduced. directory cache mode, one blocks stored directory (including root) basic information files stored directory. older versions, directory header stored pointers files directory. meant older OS versions header file (scattered around disk) needed loaded, order list files directory. directory cache mode information stored one block (necessary), faster listing directory content. original machine , floppy disk drives pretty slow. Note using ‘directory cache’ mode requires larger storage overhead file system, leaving less capacity actual file data.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/articles/file_system_modes.html","id":"creating-disks-with-diferent-modes","dir":"Articles","previous_headings":"","what":"Creating disks with diferent modes","title":"ADF File System Modes","text":"create blank disk create_adf_device(), contains data . order store files virtual disk, need format file system. can achieved prepare_adf_device(). function can also specify modes listed want use disk:","code":"library(adfExplorer2)  disk_file <- tempfile(fileext = \".adf\")  ## Create a blank device and create a connection to it: new_device <- create_adf_device(disk_file, write_protected = FALSE)  ## Format the device and install a file system: prepare_adf_device(   dev           = new_device,   name          = \"Example_disk\",   ffs           = TRUE,  ## Use fast file system   international = TRUE,  ## Use international mode   dircache      = FALSE) ## Don't use directory caching. #> Bootable DOS Floppy DD #>   Volume 0 [fi-]: Example_disk (0.2%)  ## Don't forget to close the connection when you are done: close(new_device)"},{"path":"https://pepijn-devries.github.io/adfExplorer2/articles/virtual_paths.html","id":"virtual-paths","dir":"Articles","previous_headings":"","what":"Virtual paths","title":"Virtual Paths","text":"computing, path unique identifier file directory system. usually represented character string. adfExplorer2 package introduces virtual path path file directory virtual device. order define virtual path, first need virtual device work . code show set connection Amiga Disk File provided package example.","code":"library(adfExplorer2)  adz_file <- system.file(\"example.adz\", package = \"adfExplorer2\") my_device <- connect_adf(adz_file)"},{"path":"https://pepijn-devries.github.io/adfExplorer2/articles/virtual_paths.html","id":"full-path","dir":"Articles","previous_headings":"Virtual paths","what":"Full path","title":"Virtual Paths","text":"full path always starts root file system. several alternatives refer disk’s root, needs followed colon character. Option 1 use devices logical name. floppy disk first station called \"DF0:\": device happens system’s device can refer \"SYS:\". device also treated system’s device. can use: course, know disk’s name, can also use refer root: doesn’t matter options use, refer root. root, can specify subsequent path file directory. directories separated forward slashes Amiga. use: refers file ‘startup-sequence’ directory ‘s’ turn located disk’s root. Note resulting displayed file name contains uppercase characters, whereas requested path . Amiga paths case insensitive.","code":"virtual_path(my_device, \"DF0:\") #> ROOT                   adfExampleOFS virtual_path(my_device, \"SYS:\") #> ROOT                   adfExampleOFS virtual_path(my_device, \"adfExampleOFS:\") #> ROOT                   adfExampleOFS virtual_path(my_device, \"DF0:s/startup-sequence\") #> FILE   0.6 kB DEWR---- Startup-Sequence"},{"path":"https://pepijn-devries.github.io/adfExplorer2/articles/virtual_paths.html","id":"relative-path","dir":"Articles","previous_headings":"Virtual paths","what":"Relative path","title":"Virtual Paths","text":"can also use relative paths. paths specified current directory device onward. connect device, current directory automatically set disk’s root. skip root wish refer file :","code":"virtual_path(my_device, \"s/startup-sequence\") #> FILE   0.6 kB DEWR---- Startup-Sequence"},{"path":"https://pepijn-devries.github.io/adfExplorer2/articles/virtual_paths.html","id":"cleaning-up","dir":"Articles","previous_headings":"","what":"Cleaning up","title":"Virtual Paths","text":"Don’t forget cleanup close connection virtual device","code":"close(my_device)"},{"path":"https://pepijn-devries.github.io/adfExplorer2/articles/virtual_paths.html","id":"a-note-on-disk-file-and-directory-names","dir":"Articles","previous_headings":"","what":"A note on disk, file and directory names","title":"Virtual Paths","text":"name disk, file directories consist least 1 UTF8 character, maximum 30 characters. can use lower upper case characters name. can use almost character name, advisable use alphanumerical characters, spaces periods. characters really allowed Amiga file names forward slashes colons, used path separators.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Pepijn de Vries. Author, maintainer.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"de Vries P (2024). adfExplorer2: Access Manipulate Amiga Disk Files. R package version 0.0.0.9005, https://pepijn-devries.github.io/adfExplorer2/.","code":"@Manual{,   title = {adfExplorer2: Access and Manipulate Amiga Disk Files},   author = {Pepijn {de Vries}},   year = {2024},   note = {R package version 0.0.0.9005},   url = {https://pepijn-devries.github.io/adfExplorer2/}, }"},{"path":"https://pepijn-devries.github.io/adfExplorer2/index.html","id":"adfexplorer2","dir":"","previous_headings":"","what":"Access and Manipulate Amiga Disk Files","title":"Access and Manipulate Amiga Disk Files","text":"adfExplorer2 successor adfExplorer. can used read write virtual Amiga Disks, .k.Amiga Disk Files (ADF).","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Access and Manipulate Amiga Disk Files","text":"can install development version adfExplorer2 r-universe :","code":"install.packages(\"adfExplorer2\", repos = c(\"https://pepijn-devries.r-universe.dev\", \"https://cloud.r-project.org\"))"},{"path":[]},{"path":"https://pepijn-devries.github.io/adfExplorer2/index.html","id":"amiga-disk-files","dir":"","previous_headings":"Background","what":"Amiga Disk Files","title":"Access and Manipulate Amiga Disk Files","text":"Commodore Amiga home computer relied heavily ’s build-3.5 inch floppy disk drive late eighties early nineties. Amiga popular system nowadays can accurately emulated modern machines. problem emulation Amiga modern machines longer floppy disk drives. , usually physically able read Amiga formatted disks. overcome problem, Amiga Disk File (ADF) created. files virtual representation floppy disks can used emulation.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/index.html","id":"legal-notes","dir":"","previous_headings":"Background > Amiga Disk Files","what":"Legal notes","title":"Access and Manipulate Amiga Disk Files","text":"Emulating Commodore Amiga hardware , far can tell, legal. However, Amiga operating system stored read memory chip. commonly referred kickstart. kickstart software still protected copyright law. Licensed copies can bought legally AmigaForever. true much Amiga software, still protected copyright. Note analysing ADF files adfExplorer2 package don’t need kickstart software. Just make sure ADF files use contain data software (don’t need) licence.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/index.html","id":"the-adfexplorer2-package","dir":"","previous_headings":"Background","what":"The adfExplorer2 package","title":"Access and Manipulate Amiga Disk Files","text":"package allow analyse Amiga Disk Files (ADF) R scripting language. can also used transfer files ADF batches, e.g. preparing disks emulation purposes. focus older Amiga operating systems (.e., OS 3.x less), familiar systems. newer versions floppy disks became less important anyway. Note package read extended ADF files containing information disk’s Modified Frequency Modulation (MFM). information typically required copy protected disk’s therefore scope package.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Access and Manipulate Amiga Disk Files","text":"","code":"library(adfExplorer2)  ## First setup a connection to a virtual device adz_file <- system.file(\"example.adz\", package = \"adfExplorer2\") my_device <- connect_adf(adz_file)  ## Open a connection to a file on the virtual device fcon <- adf_file_con(my_device, \"DF0:s/startup-sequence\")  ## Read from the file my_startup <- readLines(fcon, warn = FALSE)  ## Close the file close(fcon)  ## Close the virtual device close(my_device)"},{"path":"https://pepijn-devries.github.io/adfExplorer2/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Access and Manipulate Amiga Disk Files","text":"adfExplorer2 package R interface around ADFlib library. package possible without work Laurent Clévy, Tomasz Wolak) many contributors ADFlib.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Access and Manipulate Amiga Disk Files","text":"Please note adfExplorer2 project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/adfExplorer2-package.html","id":null,"dir":"Reference","previous_headings":"","what":"adfExplorer2: Access and Manipulate Amiga Disk Files — adfExplorer2-package","title":"adfExplorer2: Access and Manipulate Amiga Disk Files — adfExplorer2-package","text":"Amiga Disk Files (ADF) virtual representations 3.5 inch floppy disks Commodore Amiga. disk drives systems (including modern drives) able read disks. AdfExplorer2 package enables establish R connections files virtual DOS-formatted disks, can use read write files.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/adfExplorer2-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"adfExplorer2: Access and Manipulate Amiga Disk Files — adfExplorer2-package","text":"Maintainer: Pepijn de Vries pepijn.devries@outlook.com (ORCID)","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/adf_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Read or write raw data blocks to a virtual device — read_block","title":"Read or write raw data blocks to a virtual device — read_block","text":"Amiga file system structured around 512 byte blocks. double density floppy disk consists 1760 blocks 512 bytes. read_block write_block can used transform raw data virtual devices (created create_adf_device() connect_adf()). Note writing raw data disk corrupt file system device. generally advised unless know .","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/adf_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read or write raw data blocks to a virtual device — read_block","text":"","code":"read_block(dev, sector, ...)  # S3 method for class 'adf_device' read_block(dev, sector, ...)  write_block(dev, sector, data, ...)  # S3 method for class 'adf_device' write_block(dev, sector, data, ...)  # S3 method for class 'raw' write_block.adf_device(dev, sector, data, ...)  # S3 method for class 'adf_block' write_block.adf_device(dev, sector, data, ...)  # Default S3 method write_block.adf_device(dev, sector, data, ...)  as_block(data, ...)  new_block()"},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/adf_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read or write raw data blocks to a virtual device — read_block","text":"dev virtual adf device information needs obtained. class adf_device can created create_adf_device() connect_adf(). sector Sector ID block wish read/write. integer value. double density disks, ID ranges 0 1759. ... Ignored data Block data (raw vector length 512) wish write virtual device","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/adf_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read or write raw data blocks to a virtual device — read_block","text":"case write_block NULL returned invisibly. case read_block raw data returned adf_block class object.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/adf_block.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read or write raw data blocks to a virtual device — read_block","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/adf_dir_list.html","id":null,"dir":"Reference","previous_headings":"","what":"List entries in a directory of a virtual ADF device — adf_dir_list","title":"List entries in a directory of a virtual ADF device — adf_dir_list","text":"Get overview entries (files directories) specific directory.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/adf_dir_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List entries in a directory of a virtual ADF device — adf_dir_list","text":"","code":"adf_dir_list(x, virtual_path, recursive = FALSE, ...)  # S3 method for class 'adf_device' adf_dir_list(x, virtual_path, recursive = FALSE, ...)  # S3 method for class 'virtual_path' adf_dir_list(x, virtual_path, recursive = FALSE, ...)  # S3 method for class 'character' adf_dir_list.adf_device(x, virtual_path, recursive = FALSE, ...)  # S3 method for class 'virtual_path' adf_dir_list.adf_device(x, virtual_path, recursive = FALSE, ...)"},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/adf_dir_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List entries in a directory of a virtual ADF device — adf_dir_list","text":"x Either adf_device class object, case virtual_path argument needs specified; , virtual_path class object. virtual_path virtual path wish obtain list entries (see also vignette(\"virtual_paths\")). missing, entries current directory (adf_directory()) returned, wen x adf_device class object. x virtual_path class object, content path defined object listed recursive logical value. set TRUE, function called recursively subdirectories virtual_path. ... Ignored","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/adf_dir_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List entries in a directory of a virtual ADF device — adf_dir_list","text":"vector virtual_path class objects","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/adf_dir_list.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"List entries in a directory of a virtual ADF device — adf_dir_list","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/adf_dir_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List entries in a directory of a virtual ADF device — adf_dir_list","text":"","code":"## First setup a connection to a virtual device adz_file <- system.file(\"example.adz\", package = \"adfExplorer2\") my_device <- connect_adf(adz_file)  ## List all entries in the disk's root: adf_dir_list(my_device) #> DIR  ...DEWR---- Devs #> DIR  ...   DEWR---- S #> DIR  ...DEWR---- this #> DIR  ...DEWR---- mods ## List all entries on the disk: adf_dir_list(my_device, recursive = TRUE) #> DIR  ...DEWR---- Devs #> FILE ...configuration #> DIR  ...   DEWR---- S #> FILE ...rtup-Sequence #> DIR  ...DEWR---- this #> DIR  ...  DEWR---- is #> DIR  ...   DEWR---- a #> DIR  ...DEWR---- deep #> DIR  ...DEWR---- path #> DIR  ...DEWR---- mods #> FILE ...--- mod.intro  close(my_device)"},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/adf_directory.html","id":null,"dir":"Reference","previous_headings":"","what":"Changing and creating directories on a virtual device — adf_directory","title":"Changing and creating directories on a virtual device — adf_directory","text":"adf_directory() shows current directory virtual device, file system present. connecting creating new device, current directory disk's root default. change current directory, use adf_directory() combination assign operator (<-).","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/adf_directory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Changing and creating directories on a virtual device — adf_directory","text":"","code":"adf_directory(dev, ...)  # S3 method for class 'adf_device' adf_directory(dev, ...)  adf_directory(dev, ...) <- value  # S3 method for class 'adf_device' adf_directory(dev, ...) <- value  # S3 method for class 'character' adf_directory.adf_device(dev, ...) <- value  # S3 method for class 'virtual_path' adf_directory.adf_device(dev, ...) <- value  adf_make_dir(x, virtual_path, ...)  # S3 method for class 'adf_device' adf_make_dir(x, virtual_path, ...)  # S3 method for class 'virtual_path' adf_make_dir(x, virtual_path, ...)  # S3 method for class 'character' adf_make_dir.adf_device(x, virtual_path, ...)  # S3 method for class 'virtual_path' adf_make_dir.adf_device(x, virtual_path, ...)"},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/adf_directory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Changing and creating directories on a virtual device — adf_directory","text":"dev virtual adf device information needs obtained. class adf_device can created create_adf_device() connect_adf(). ... Ignored value character string virtual_path (see virtual_path()) representing directory wish set current. x adf_device virtual_path class object. first specifies device directory needs created. latter specifies directory device needs created. virtual_path character string virtual_path (see virtual_path()) specifying name new directory created. missing x class virtual_path","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/adf_directory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Changing and creating directories on a virtual device — adf_directory","text":"adf_make_dir() returns device connection. adf_directory() returns current directory virtual_path class object.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/adf_directory.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Changing and creating directories on a virtual device — adf_directory","text":"create new directory device use adf_make_dir() use full relative path name specify new directory name. See vignette(\"virtual_paths\") note file directory names Amiga.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/adf_directory.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Changing and creating directories on a virtual device — adf_directory","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/adf_directory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Changing and creating directories on a virtual device — adf_directory","text":"","code":"## First setup a connection to a virtual device adz_file <- system.file(\"example.adz\", package = \"adfExplorer2\") my_device <- connect_adf(adz_file)  ## Show the current directory adf_directory(my_device) #> ROOT                   adfExampleOFS  ## Create a new directory adf_make_dir(my_device, \"DF0:s/newdir\") #> Bootable DOS Floppy DD #>   Volume 0 [---]: adfExampleOFS (2.2%)  ## Change the current dir to the new directory: adf_directory(my_device) <- \"DF0:s/newdir\"  ## Close the virtual device close(my_device)"},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/adf_file_con.html","id":null,"dir":"Reference","previous_headings":"","what":"Open a connection to a file on a virtual ADF device — adf_file_con","title":"Open a connection to a file on a virtual ADF device — adf_file_con","text":"Open connection file virtual ADF device. created connection (valid) accepted R function reads writes connection, readLines(), writeLines(), readBin(), writeBin(), etc.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/adf_file_con.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open a connection to a file on a virtual ADF device — adf_file_con","text":"","code":"adf_file_con(x, ..., writable = FALSE)  # S3 method for class 'adf_device' adf_file_con(x, virtual_path, ..., writable = FALSE)  # S3 method for class 'character' adf_file_con.adf_device(x, virtual_path, ..., writable = FALSE)  # S3 method for class 'virtual_path' adf_file_con(x, ..., writable = FALSE)"},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/adf_file_con.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open a connection to a file on a virtual ADF device — adf_file_con","text":"x Either connection virtual ADF device created connect_adf(), virtual_path created virtual_path(). ... Ignored. writable logical value. TRUE connection can used write file virtual device. FALSE can used read. Note writeable connection can setup virtual device write protected. virtual_path required x virtual device class adf_device. case virtual_path character string representing path file virtual device. See also vignette(\"virtual_paths\").","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/adf_file_con.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open a connection to a file on a virtual ADF device — adf_file_con","text":"Returns R connection can handled function accepts connection reading writing. Remember call close() use.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/adf_file_con.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Open a connection to a file on a virtual ADF device — adf_file_con","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/adf_file_con.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open a connection to a file on a virtual ADF device — adf_file_con","text":"","code":"## First setup a connection to a virtual device adz_file <- system.file(\"example.adz\", package = \"adfExplorer2\") my_device <- connect_adf(adz_file)  ## Open a connection to a file on the virtual device fcon <- adf_file_con(my_device, \"DF0:s/startup-sequence\")  ## Read from the file my_startup <- readLines(fcon, warn = FALSE)  ## Close the file close(fcon)  ## Close the virtual device close(my_device)"},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/compress.html","id":null,"dir":"Reference","previous_headings":"","what":"Compress ADF to ADZ files and vice versa — compress_adf","title":"Compress ADF to ADZ files and vice versa — compress_adf","text":"ADZ format essentially compressed (gzip) version Amiga Disk File (ADF) format. adfExplorer2 allows connect formats. However, can open 'read-' connection ADZ files. Use compression decompression functions documented move back forth ADF ADZ formats.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/compress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compress ADF to ADZ files and vice versa — compress_adf","text":"","code":"compress_adf(source, destination)  decompress_adz(source, destination)"},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/compress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compress ADF to ADZ files and vice versa — compress_adf","text":"source Path source file read. destination Path destination file write.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/compress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compress ADF to ADZ files and vice versa — compress_adf","text":"Returns NULL invisibly.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/compress.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compress ADF to ADZ files and vice versa — compress_adf","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/compress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compress ADF to ADZ files and vice versa — compress_adf","text":"","code":"adz_file  <- system.file(\"example.adz\", package = \"adfExplorer2\") adf_file  <- tempfile(fileext = \".adf\") adz_file2 <- tempfile(fileext = \".adz\")  decompress_adz(adz_file, adf_file) compress_adf(adf_file, adz_file2)"},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/connect_adf.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a connection to a virtual disk — connect_adf","title":"Create a connection to a virtual disk — connect_adf","text":"Establish connection virtual disk stored Amiga Disk Files (ADF). write read directly connection. Instead, use methods provided package retrieve information virtual disk create connections files disk, can write read (see adf_file_con()). Like connection, please use close() close connection use.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/connect_adf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a connection to a virtual disk — connect_adf","text":"","code":"connect_adf(filename, write_protected = TRUE)"},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/connect_adf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a connection to a virtual disk — connect_adf","text":"filename Filename ADF ADZ file containing virtual disk write_protected logical value indicating whether virtual disk needs write protected. TRUE, can open 'read ' connections write disk.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/connect_adf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a connection to a virtual disk — connect_adf","text":"Returns R connection class adf_device.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/connect_adf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a connection to a virtual disk — connect_adf","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/connect_adf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a connection to a virtual disk — connect_adf","text":"","code":"adz_file <- system.file(\"example.adz\", package = \"adfExplorer2\") my_device <- connect_adf(adz_file)  device_capacity(my_device) #> [1] 901120 close(my_device)"},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/create_adf_device.html","id":null,"dir":"Reference","previous_headings":"","what":"Create and format a virtual ADF device — create_adf_device","title":"Create and format a virtual ADF device — create_adf_device","text":"functions help create empty virtual device can used Commodore Amiga emulation. create_adf_device() simply creates file proper size (file size represents device capacity) fills raw zeros. order use device Amiga operating system, file system needs installed device. can achieved prepare_adf_device(). Note file system also consume disk space virtual device.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/create_adf_device.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create and format a virtual ADF device — create_adf_device","text":"","code":"create_adf_device(destination, type = \"DD\", ..., connect = TRUE)  prepare_adf_device(   dev,   name = \"EMPTY\",   ffs = TRUE,   international = TRUE,   dircache = FALSE,   bootable = TRUE,   ... )  # S3 method for class 'adf_device' prepare_adf_device(   dev,   name = \"EMPTY\",   ffs = TRUE,   international = TRUE,   dircache = FALSE,   bootable = TRUE,   ... )"},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/create_adf_device.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create and format a virtual ADF device — create_adf_device","text":"destination File path virtual device needs stored. type Specify type virtual device wish create. one \"DD\" (double density floppy disk) \"HD\" (high density floppy disk). ... Ignored prepare_adf_device(). connect logical value. set TRUE connection opened newly created virtual device returned adf_device class object. set FALSE, file just created connection opened. latter case NULL returned invisibly. dev virtual adf device information needs obtained. class adf_device can created create_adf_device() connect_adf(). name character string specifying disk name volume virtual device. truncated automatically long. ffs logical value indicating file system used. TRUE 'Fast File System' (FFS) used, FALSE, 'Old File System' used. See also vignette(\"file_system_modes\"). international logical value indicating whether international mode used file naming. See also vignette(\"file_system_modes\"). dircache logical value indicating whether directory caching used. See also vignette(\"file_system_modes\"). bootable logical value indicating whether want include executable code boot block. set TRUE minimal code added boot block. Amiga emulator, code load Amiga Disk Operating System library start Amiga Command line interface (CLI). run startup sequence file disk (available). set FALSE code added. case file system still accessible Amiga operating system (file system mode compatible). just use disk start (virtual) Amiga machine.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/create_adf_device.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create and format a virtual ADF device — create_adf_device","text":"Either adf_device connection NULL depending value connect.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/create_adf_device.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create and format a virtual ADF device — create_adf_device","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/create_adf_device.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create and format a virtual ADF device — create_adf_device","text":"","code":"## Filepath to store the virtual device: dest <- tempfile(fileext = \".adf\")  ## Create a blank unformated virtual device (a double density floppy disk): my_device <- create_adf_device(dest, \"DD\", connect = TRUE, write_protected = FALSE)  print(my_device) #> Non-bootable unformatted Floppy DD  ## Format the floppy and create a file system on the device: prepare_adf_device(my_device, name = \"foobar\") #> Bootable DOS Floppy DD #>   Volume 0 [fi-]: foobar (0.2%)  print(my_device) #> Bootable DOS Floppy DD #>   Volume 0 [fi-]: foobar (0.2%)  ## don't forget to close the device connection after use: close(my_device)"},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/device_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain information about an adf_device connection — device_type","title":"Obtain information about an adf_device connection — device_type","text":"collection functions retrieve information virtual device, volume (file system) available device. See examples usage results.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/device_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain information about an adf_device connection — device_type","text":"","code":"device_type(dev, ...)  # S3 method for class 'adf_device' device_type(dev, ...)  device_capacity(dev, ...)  # S3 method for class 'adf_device' device_capacity(dev, ...)  volume_capacity(dev, ...)  # S3 method for class 'adf_device' volume_capacity(dev, vol = 0L, ...)  volume_name(dev, ...)  # S3 method for class 'adf_device' volume_name(dev, vol = 0L, ...)  n_volumes(dev, ...)  # S3 method for class 'adf_device' n_volumes(dev, ...)  bytes_free(dev, ...)  # S3 method for class 'adf_device' bytes_free(dev, vol = 0L, ...)  is_bootable(dev, ...)  # S3 method for class 'adf_device' is_bootable(dev, vol = 0L, ...)  is_fast_file_system(dev, ...)  # S3 method for class 'adf_device' is_fast_file_system(dev, vol = 0L, ...)  is_international(dev, ...)  # S3 method for class 'adf_device' is_international(dev, vol = 0L, ...)  is_dircache(dev, ...)  # S3 method for class 'adf_device' is_dircache(dev, vol = 0L, ...)  is_write_protected(dev, ...)  # S3 method for class 'adf_device' is_write_protected(dev, ...)"},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/device_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain information about an adf_device connection — device_type","text":"dev virtual adf device information needs obtained. class adf_device can created create_adf_device() connect_adf(). ... Ignored vol Volume index number device starting 0. Default 0. Note floppy disks can 1 volume installed.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/device_info.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Obtain information about an adf_device connection — device_type","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/device_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain information about an adf_device connection — device_type","text":"","code":"adz_file <- system.file(\"example.adz\", package = \"adfExplorer2\") my_device <- connect_adf(adz_file)  device_type(my_device) #> [1] \"Floppy DD\"  device_capacity(my_device) # in bytes #> [1] 901120  volume_capacity(my_device) # in bytes #> [1] 901120  n_volumes(my_device) # number of volumes available on device #> [1] 1  volume_name(my_device) # name of the volume #> [1] \"adfExampleOFS\"  bytes_free(my_device) # bytes available for writing #> [1] 882176  is_bootable(my_device) # tests if device is potentially bootable #> [1] TRUE  is_fast_file_system(my_device) # tests if volume uses FFS #> [1] FALSE  is_international(my_device) # tests if file system uses intl mode #> [1] FALSE  is_dircache(my_device) # tests if file system uses dir caching #> [1] FALSE  is_write_protected(my_device) # tests if device is protected against writing #> [1] FALSE  close(my_device)"},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if an entry exists on a virtual device — adf_file_exists","title":"Test if an entry exists on a virtual device — adf_file_exists","text":"Test entry (file directory) exists virtual ADF device. adf_file_exists() equivalent file.exists() virtual ADF device. adf_dir_exists() equivalent dir.exists() virtual ADF device.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if an entry exists on a virtual device — adf_file_exists","text":"","code":"adf_file_exists(x, virtual_path, ...)  # S3 method for class 'adf_device' adf_file_exists(x, virtual_path, ...)  # S3 method for class 'virtual_path' adf_file_exists(x, virtual_path, ...)  adf_dir_exists(x, virtual_path, ...)  # S3 method for class 'adf_device' adf_dir_exists(x, virtual_path, ...)  # S3 method for class 'virtual_path' adf_dir_exists(x, virtual_path, ...)"},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if an entry exists on a virtual device — adf_file_exists","text":"x Either virtual device virtual path. virtual_path virtual_path() checked existence. omitted x already virtual path. ... Ignored","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/exists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if an entry exists on a virtual device — adf_file_exists","text":"adf_file_exists() returns TRUE path exists virtual device, FALSE otherwise. adf_dir_exists() returns TRUE path exists directory, FALSE otherwise.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/exists.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Test if an entry exists on a virtual device — adf_file_exists","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/exists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if an entry exists on a virtual device — adf_file_exists","text":"","code":"## First setup a connection to a virtual device adz_file <- system.file(\"example.adz\", package = \"adfExplorer2\") my_device <- connect_adf(adz_file)  adf_file_exists(my_device, \"s/startup-sequence\") #> [1] TRUE adf_dir_exists(my_device, \"s/startup-sequence\") #> [1] FALSE  close(my_device)"},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/move.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy or move files between physical and virtual devices — copy_adf_entry","title":"Copy or move files between physical and virtual devices — copy_adf_entry","text":"functions can copy move entries (files directories) physical virtual ADF device. copy_adf_entry() files duplicated, move_adf_entry() files moved (deleted source).","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/move.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy or move files between physical and virtual devices — copy_adf_entry","text":"","code":"copy_adf_entry(source, destination, ...)  # S3 method for class 'character' copy_adf_entry(source, destination, ...)  # S3 method for class 'virtual_path' copy_adf_entry(source, destination, ...)  # S3 method for class 'virtual_path' copy_adf_entry.character(source, destination, ...)  # S3 method for class 'virtual_path' copy_adf_entry.virtual_path(source, destination, ...)  # S3 method for class 'character' copy_adf_entry.virtual_path(source, destination, ...)  move_adf_entry(source, destination, ...)  # S3 method for class 'character' move_adf_entry(source, destination, ...)  # S3 method for class 'virtual_path' move_adf_entry(source, destination, ...)  # S3 method for class 'virtual_path' move_adf_entry.character(source, destination, ...)  # S3 method for class 'virtual_path' move_adf_entry.virtual_path(source, destination, ...)  # S3 method for class 'character' move_adf_entry.virtual_path(source, destination, ...)"},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/move.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy or move files between physical and virtual devices — copy_adf_entry","text":"source, destination source path file directory needs moved copied. destination path directory source needs copied moved. source destination character string, assumed path file directory physical device. can use virtual_path() either source destination . source destination character string. copying moving files physical device base function file.copy(). ... Ignored","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/move.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Copy or move files between physical and virtual devices — copy_adf_entry","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/move.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy or move files between physical and virtual devices — copy_adf_entry","text":"","code":"## Create an Amiga Disk File ## and prepare a file system on the virtual device my_device <-   create_adf_device(     tempfile(fileext = \".adf\"),     write_protected = FALSE) |>   prepare_adf_device()  ## Copy the packaged R scripts of this package to the virtual device copy_adf_entry(   system.file(\"R\", package = \"adfExplorer2\"),   virtual_path(my_device, \"DF0:\") )  ## List all entries on the virtual device adf_dir_list(my_device, recursive = TRUE) #> DIR  ...   DEWR---- R #> FILE ...Explorer2.rdb #> FILE ...Explorer2.rdx #> FILE ... adfExplorer2  ## Move the entire virtual device content to ## the tempdir on your physical device move_adf_entry(   virtual_path(my_device, \"DF0:\"),   tempdir() )  close(my_device)"},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/remove_adf_entry.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove entry (file / directory) from a virtual ADF device — remove_adf_entry","title":"Remove entry (file / directory) from a virtual ADF device — remove_adf_entry","text":"function removes entry (file directory) virtual ADF device. moment function removes single entry per call, case entry directory, directory needs empty can removed.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/remove_adf_entry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove entry (file / directory) from a virtual ADF device — remove_adf_entry","text":"","code":"remove_adf_entry(x, virtual_path, flush = FALSE, ...)  # S3 method for class 'adf_device' remove_adf_entry(x, virtual_path, flush = FALSE, ...)  # S3 method for class 'virtual_path' remove_adf_entry(x, virtual_path, flush = FALSE, ...)  # S3 method for class 'character' remove_adf_entry.adf_device(x, virtual_path, flush = FALSE, ...)  # S3 method for class 'virtual_path' remove_adf_entry.adf_device(x, virtual_path, flush = FALSE, ...)"},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/remove_adf_entry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove entry (file / directory) from a virtual ADF device — remove_adf_entry","text":"x virtual ADF device entry needs deleted virtual path pointing entry deleted. case virtual device, class adf_device can created create_adf_device() connect_adf(). case virtual path use virtual_path(). virtual_path character string virtual_path (see virtual_path()) representing file directory wish delete. omitted x alreade virtual path. flush logical value. set FALSE (default), entry's registry parent directory removed flags bitmap block set 'available'. entry's header data entry file, file data still linger virtual disk. want , set argument TRUE, case file directory data purged. Note latter case, possible recover deleted file directory. ... Ignored","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/remove_adf_entry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove entry (file / directory) from a virtual ADF device — remove_adf_entry","text":"Returns device connection","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/remove_adf_entry.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Remove entry (file / directory) from a virtual ADF device — remove_adf_entry","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/remove_adf_entry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove entry (file / directory) from a virtual ADF device — remove_adf_entry","text":"","code":"## We first need a writable connection to an ADF device. ## For this purpose we decompress the ADZ file that comes ## with this package and open a connection  adz_file <- system.file(\"example.adz\", package = \"adfExplorer2\") adf_file <- tempfile(fileext = \".adf\") decompress_adz(adz_file, adf_file) my_device <- connect_adf(adf_file, write_protected = FALSE)  ## List files in directory 'Devs': adf_dir_list(my_device, \"Devs\") #> FILE   0.2 kB DEWR---- system-configuration  ## remove the file 'system-configuration' from the virtual device remove_adf_entry(my_device, \"devs/system-configuration\") #> Bootable DOS Floppy DD #>   Volume 0 [---]: adfExampleOFS (2.0%)  ## List files in directory 'Devs' again: adf_dir_list(my_device, \"Devs\") #> :EMPTY:  ## close the connection to the virtual device close(my_device)"},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/s3_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic methods for S3 class objects — format.adf_device","title":"Basic methods for S3 class objects — format.adf_device","text":"Format print methods S3 class objects created adfExplorer2","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/s3_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic methods for S3 class objects — format.adf_device","text":"","code":"# S3 method for class 'adf_device' format(x, ...)  # S3 method for class 'adf_file_con' format(x, ...)  # S3 method for class 'adf_block' format(x, ...)  # S3 method for class 'virtual_path' format(x, width = 20L, ...)  # S3 method for class 'adf_device' print(x, ...)  # S3 method for class 'adf_file_con' print(x, ...)  # S3 method for class 'adf_block' print(x, ...)  # S3 method for class 'virtual_path' print(x, ...)  # S3 method for class 'virtual_path' as.character(x, ...)"},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/s3_methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic methods for S3 class objects — format.adf_device","text":"x Object formatted printed ... Ignored passed next methods width Set text width formatting virtual paths","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/virtual_path.html","id":null,"dir":"Reference","previous_headings":"","what":"A path pointing to a file or directory on a virtual ADF device — virtual_path","title":"A path pointing to a file or directory on a virtual ADF device — virtual_path","text":"function creates path pointing file directory virtual ADF device (created connect_adf() create_adf_device()). virtual path created function can used establish readable writable connection file, obtain information file directory. See also vignette(\"virtual_paths\")","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/virtual_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A path pointing to a file or directory on a virtual ADF device — virtual_path","text":"","code":"virtual_path(dev, virtual_path)"},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/virtual_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A path pointing to a file or directory on a virtual ADF device — virtual_path","text":"dev virtual ADF device (created connect_adf() create_adf_device()). Make sure file system present virtual device install first missing using prepare_adf_device(). virtual_path character string representing path file directory virtual device.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/virtual_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A path pointing to a file or directory on a virtual ADF device — virtual_path","text":"Returns virtual_path class object.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/virtual_path.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A path pointing to a file or directory on a virtual ADF device — virtual_path","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer2/reference/virtual_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A path pointing to a file or directory on a virtual ADF device — virtual_path","text":"","code":"adz_file <- system.file(\"example.adz\", package = \"adfExplorer2\")  # Open a connection to a virtual device: my_device <- connect_adf(adz_file)  # specify a virtual path: my_path <- virtual_path(my_device, \"DF0:s/startup-sequence\")  # close the virtual device: close(my_device)"},{"path":"https://pepijn-devries.github.io/adfExplorer2/news/index.html","id":"adfexplorer2-v009005","dir":"Changelog","previous_headings":"","what":"adfExplorer2 v0.0.9005","title":"adfExplorer2 v0.0.9005","text":"Connect ADF ADZ files Create new virtual floppy disks (including file system) Connect files virtual floppy disks Obtain device information List files directories virtual device Remove files directories virtual device Create directories virtual device","code":""}]
